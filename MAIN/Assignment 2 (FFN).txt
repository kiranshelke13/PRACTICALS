1.
import tensorflow as tf
from tensorflow import keras

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

2.
mnist =tf.keras.datasets.mnist
(x_train,y_train),(x_test,y_test)=mnist.load_data()

3.
plt.matshow(x_train[1])
print(mnist)

4.
x_train =x_train/255
x_test=x_test/255

5.
x_train[0]

6.
model=keras.Sequential([keras.layers.Flatten(input_shape=(28,28)),
                        keras.layers.Dense(128, activation='relu'),
                        keras.layers.Dense(10,activation='softmax')
                        ])
model.summary()

7.
model.compile(optimizer='sgd',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

8.
history=model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=10)

9.
test_loss,test_acc=model.evaluate(x_test,y_test)
print("Loss=%.3f" %test_loss)
print("Accuracy=%.3f" %test_acc)

10.
import random
n=random.randint(0,9999)
plt.imshow(x_test[n])
plt.show
prediction=model.predict(x_test)
print("The handwritten number is %d" % np.argmax(prediction[n]))

11.
test_predict=model.predict(x_test)

test_predict_labels=np.argmax(test_predict,axis=1)
confusion_matrix=tf.math.confusion_matrix(labels=y_test,predictions=test_predict_labels)
print('Confusion Matrix of the test:\n', confusion_matrix)
